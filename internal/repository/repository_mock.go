// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/fajarabdillahfn/shoping-gql/internal/model"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			GetBySkuFunc: func(ctx context.Context) (*model.Product, error) {
//				panic("mock out the GetBySku method")
//			},
//			UpdateQuantityFunc: func(ctx context.Context, newQuantity uint) error {
//				panic("mock out the UpdateQuantity method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetBySkuFunc mocks the GetBySku method.
	GetBySkuFunc func(ctx context.Context) (*model.Product, error)

	// UpdateQuantityFunc mocks the UpdateQuantity method.
	UpdateQuantityFunc func(ctx context.Context, newQuantity uint) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBySku holds details about calls to the GetBySku method.
		GetBySku []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateQuantity holds details about calls to the UpdateQuantity method.
		UpdateQuantity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NewQuantity is the newQuantity argument value.
			NewQuantity uint
		}
	}
	lockGetBySku       sync.RWMutex
	lockUpdateQuantity sync.RWMutex
}

// GetBySku calls GetBySkuFunc.
func (mock *RepositoryMock) GetBySku(ctx context.Context) (*model.Product, error) {
	if mock.GetBySkuFunc == nil {
		panic("RepositoryMock.GetBySkuFunc: method is nil but Repository.GetBySku was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetBySku.Lock()
	mock.calls.GetBySku = append(mock.calls.GetBySku, callInfo)
	mock.lockGetBySku.Unlock()
	return mock.GetBySkuFunc(ctx)
}

// GetBySkuCalls gets all the calls that were made to GetBySku.
// Check the length with:
//
//	len(mockedRepository.GetBySkuCalls())
func (mock *RepositoryMock) GetBySkuCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetBySku.RLock()
	calls = mock.calls.GetBySku
	mock.lockGetBySku.RUnlock()
	return calls
}

// UpdateQuantity calls UpdateQuantityFunc.
func (mock *RepositoryMock) UpdateQuantity(ctx context.Context, newQuantity uint) error {
	if mock.UpdateQuantityFunc == nil {
		panic("RepositoryMock.UpdateQuantityFunc: method is nil but Repository.UpdateQuantity was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NewQuantity uint
	}{
		Ctx:         ctx,
		NewQuantity: newQuantity,
	}
	mock.lockUpdateQuantity.Lock()
	mock.calls.UpdateQuantity = append(mock.calls.UpdateQuantity, callInfo)
	mock.lockUpdateQuantity.Unlock()
	return mock.UpdateQuantityFunc(ctx, newQuantity)
}

// UpdateQuantityCalls gets all the calls that were made to UpdateQuantity.
// Check the length with:
//
//	len(mockedRepository.UpdateQuantityCalls())
func (mock *RepositoryMock) UpdateQuantityCalls() []struct {
	Ctx         context.Context
	NewQuantity uint
} {
	var calls []struct {
		Ctx         context.Context
		NewQuantity uint
	}
	mock.lockUpdateQuantity.RLock()
	calls = mock.calls.UpdateQuantity
	mock.lockUpdateQuantity.RUnlock()
	return calls
}
